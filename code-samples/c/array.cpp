// Generated by llvm2cpp - DO NOT MODIFY!

#include <llvm/Pass.h>
#include <llvm/ADT/SmallVector.h>
#include <llvm/Analysis/Verifier.h>
#include <llvm/IR/BasicBlock.h>
#include <llvm/IR/CallingConv.h>
#include <llvm/IR/Constants.h>
#include <llvm/IR/DerivedTypes.h>
#include <llvm/IR/Function.h>
#include <llvm/IR/GlobalVariable.h>
#include <llvm/IR/IRPrintingPasses.h>
#include <llvm/IR/InlineAsm.h>
#include <llvm/IR/Instructions.h>
#include <llvm/IR/LLVMContext.h>
#include <llvm/IR/LegacyPassManager.h>
#include <llvm/IR/Module.h>
#include <llvm/Support/FormattedStream.h>
#include <llvm/Support/MathExtras.h>
#include <algorithm>
using namespace llvm;

Module* makeLLVMModule();

int main(int argc, char**argv) {
  Module* Mod = makeLLVMModule();
  verifyModule(*Mod, PrintMessageAction);
  PassManager PM;
  PM.add(createPrintModulePass(&outs()));
  PM.run(*Mod);
  return 0;
}


Module* makeLLVMModule() {
 // Module Construction
 Module* mod = new Module("array.bc", getGlobalContext());
 mod->setDataLayout("");
 mod->setTargetTriple("x86_64-pc-linux-gnu");
 
 // Type Definitions
 std::vector<Type*>FuncTy_0_args;
 FunctionType* FuncTy_0 = FunctionType::get(
  /*Result=*/IntegerType::get(mod->getContext(), 32),
  /*Params=*/FuncTy_0_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_1 = PointerType::get(IntegerType::get(mod->getContext(), 32), 0);
 
 ArrayType* ArrayTy_3 = ArrayType::get(IntegerType::get(mod->getContext(), 32), 21);
 
 PointerType* PointerTy_2 = PointerType::get(ArrayTy_3, 0);
 
 
 // Function Declarations
 
 Function* func_main = mod->getFunction("main");
 if (!func_main) {
 func_main = Function::Create(
  /*Type=*/FuncTy_0,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"main", mod); 
 func_main->setCallingConv(CallingConv::C);
 }
 AttributeSet func_main_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    B.addAttribute(Attribute::UWTable);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func_main_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func_main->setAttributes(func_main_PAL);
 
 // Global Variable Declarations

 
 // Constant Definitions
 ConstantInt* const_int32_4 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("1"), 10));
 ConstantInt* const_int32_5 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("0"), 10));
 ConstantInt* const_int64_6 = ConstantInt::get(mod->getContext(), APInt(64, StringRef("0"), 10));
 ConstantInt* const_int32_7 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("11"), 10));
 
 // Global Variable Definitions
 
 // Function Definitions
 
 // Function: main (func_main)
 {
  
  BasicBlock* label_8 = BasicBlock::Create(mod->getContext(), "",func_main,0);
  
  // Block  (label_8)
  AllocaInst* ptr_9 = new AllocaInst(IntegerType::get(mod->getContext(), 32), "", label_8);
  ptr_9->setAlignment(4);
  AllocaInst* ptr_X = new AllocaInst(ArrayTy_3, "X", label_8);
  ptr_X->setAlignment(16);
  StoreInst* void_10 = new StoreInst(const_int32_5, ptr_9, false, label_8);
  GetElementPtrInst* ptr_11 = GetElementPtrInst::Create(ArrayTy_3, ptr_X, {
   const_int32_5, 
   const_int64_6
  }, "", label_8);
  StoreInst* void_12 = new StoreInst(const_int32_7, ptr_11, false, label_8);
  void_12->setAlignment(4);
  ReturnInst::Create(mod->getContext(), const_int32_5, label_8);
  
 }
 
 return mod;
}
